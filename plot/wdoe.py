import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import argparse

parser = argparse.ArgumentParser(description="hybrid", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--dataset", type=str, choices=["cifar10", "cifar100"])
parser.add_argument("--metric", type=str, choices=["fpr95", "auroc"])
args = parser.parse_args()

# plt.style.use('seaborn-v0_8-whitegrid')
# Generate sample data again
np.random.seed(0)
time = np.arange(21)
if args.dataset == "cifar10":
    if args.metric == "fpr95":
        data = np.array([[32.94, 7.76, 5.12, 6.20, 6.14, 9.52, 6.62, 7.19, 7.46, 7.12, 8.20, 9.43, 8.74, 8.13, 8.17, 6.83, 10.37, 16.48, 6.55, 5.99, 5.57], 
                        [34.08, 9.07, 7.70, 5.87, 5.68, 8.79, 8.35, 6.18, 8.98, 5.98, 7.09, 7.06, 14.08, 7.31, 4.90, 6.11, 6.29, 9.19, 7.73, 5.86, 78.77], 
                        [33.45, 7.71, 7.00, 8.52, 5.50, 7.44, 7.95, 7.02, 6.35, 6.73, 6.76, 14.96, 9.89, 6.94, 6.72, 8.82, 5.41, 6.29, 5.00, 75.06, 8.86], 
                        [33.28, 6.92, 9.90, 6.01, 7.56, 7.08, 7.17, 6.63, 7.01, 5.49, 6.99, 8.17, 5.29, 50.39, 4.56, 81.38, 4.71, 4.92, 4.99, 8.52, 5.31], 
                        [33.72, 10.20, 12.05, 8.08, 8.06, 7.12, 6.75, 5.77, 7.10, 7.38, 7.41, 17.52, 6.52, 74.20, 5.11, 5.24, 6.13, 7.66, 6.32, 5.84, 4.65]
                        ])
        data2 = np.array([[32.94, 7.24, 5.57, 5.85, 6.26, 8.33, 6.12, 6.76, 7.98, 6.75, 7.84, 7.36, 8.42, 7.14, 7.50, 7.00, 7.33, 7.61, 7.92, 7.69, 7.07], 
                        [34.08, 8.48, 7.55, 5.90, 5.74, 8.90, 8.42, 6.02, 9.27, 6.31, 7.29, 7.23, 6.35, 7.61, 7.55, 7.05, 7.00, 7.26, 6.78, 6.64, 7.35], 
                        [33.45, 7.57, 7.26, 8.15, 6.11, 7.68, 7.14, 6.58, 6.58, 6.47, 6.75, 6.25, 7.80, 6.45, 8.01, 6.56, 7.00, 7.18, 6.92, 7.12, 7.31], 
                        [33.28, 6.98, 10.19, 5.99, 6.62, 8.20, 7.32, 7.26, 6.92, 6.18, 7.38, 7.42, 8.84, 7.98, 7.20, 6.87, 7.72, 7.72, 6.80, 7.10, 6.87], 
                        [33.73, 10.01, 12.36, 9.06, 8.18, 7.59, 6.55, 5.55, 7.27, 7.18, 8.48, 7.10, 9.41, 8.11, 6.91, 7.45, 7.33, 7.38, 7.54, 7.49, 7.44]
                        ])
        data3 = np.array([[32.94, 7.85, 5.21, 6.13, 5.89, 9.94, 6.55, 6.74, 7.38, 6.89, 7.26, 8.94, 9.28, 8.73, 8.24, 5.68, 11.10, 9.27, 6.56, 5.65, 5.52], 
                        [34.07, 8.07, 7.86, 5.79, 6.17, 9.29, 8.72, 6.51, 8.06, 6.28, 6.82, 7.79, 8.66, 6.24, 5.46, 6.81, 5.59, 19.73, 7.96, 6.04, 10.82], 
                        [33.45, 7.52, 6.93, 8.09, 5.46, 7.25, 8.57, 7.13, 6.52, 6.78, 6.50, 9.55, 8.64, 8.91, 6.36, 10.14, 5.72, 7.67, 6.95, 10.18, 6.24], 
                        [33.28, 6.99, 11.46, 6.01, 7.06, 7.15, 7.86, 6.97, 7.40, 5.75, 7.32, 8.22, 9.41, 8.90, 6.42, 8.25, 5.96, 6.40, 6.25, 5.23, 5.20], 
                        [33.72, 9.66, 10.37, 7.53, 8.84, 8.23, 6.50, 5.75, 7.59, 7.32, 7.44, 14.26, 7.53, 8.48, 5.60, 6.99, 7.79, 8.22, 5.90, 8.49, 4.48]
                        ])
    elif args.metric == "auroc":
        data = np.array([[91.71, 98.34, 98.76, 98.57, 98.55, 97.94, 98.55, 98.30, 98.29, 98.37, 98.21, 97.83, 97.95, 98.08, 98.39, 98.44, 97.61, 96.41, 98.45, 98.75, 98.77], 
                        [91.32, 98.14, 98.27, 98.69, 98.69, 97.95, 98.13, 98.51, 98.04, 98.50, 98.33, 98.42, 97.07, 97.99, 98.86, 98.68, 98.43, 97.62, 98.22, 98.62, 88.94], 
                        [91.33, 98.28, 98.43, 98.15, 98.69, 98.20, 98.15, 98.45, 98.49, 98.38, 98.37, 96.95, 97.91, 98.27, 98.43, 97.74, 98.80, 98.56, 98.90, 87.08, 97.95], 
                        [91.69, 98.43, 97.93, 98.57, 98.26, 98.39, 98.38, 98.39, 98.32, 98.63, 98.45, 98.11, 98.83, 93.02, 98.95, 85.81, 98.84, 98.86, 98.83, 97.74, 98.74], 
                        [91.52, 97.88, 97.75, 98.24, 98.26, 98.32, 98.55, 98.70, 98.30, 98.22, 98.29, 96.41, 98.66, 87.91, 98.61, 98.84, 98.62, 98.03, 98.36, 98.66, 98.64]
                        ])
        data2 = np.array([[91.71, 98.39, 98.69, 98.64, 98.56, 98.16, 98.57, 98.43, 98.17, 98.45, 98.34, 98.40, 98.05, 98.25, 98.22, 98.17, 98.28, 98.10, 98.14, 98.17, 98.23], 
                        [91.32, 98.19, 98.25, 98.67, 98.70, 98.00, 98.06, 98.53, 97.95, 98.52, 98.28, 98.30, 98.44, 98.29, 98.16, 98.34, 98.27, 98.24, 98.30, 98.23, 98.27], 
                        [91.33, 98.30, 98.37, 98.20, 98.58, 98.17, 98.31, 98.50, 98.45, 98.43, 98.39, 98.44, 98.20, 98.47, 98.15, 98.38, 98.29, 98.21, 98.25, 98.23, 98.28], 
                        [91.69, 98.45, 97.96, 98.66, 98.41, 98.17, 98.36, 98.36, 98.41, 98.53, 98.41, 98.28, 98.01, 98.21, 98.30, 98.34, 98.15, 98.14, 98.37, 98.22, 98.31], 
                        [91.52, 97.90, 97.68, 98.03, 98.21, 98.27, 98.58, 98.79, 98.27, 98.30, 98.16, 98.22, 98.01, 98.11, 98.40, 98.17, 98.19, 98.24, 98.22, 98.20, 98.11]
                        ])
        data3 = np.array([[91.71, 98.34, 98.74, 98.61, 98.61, 97.87, 98.50, 98.39, 98.34, 98.41, 98.36, 97.91, 97.82, 97.94, 98.34, 98.74, 97.36, 97.94, 98.42, 98.83, 98.81], 
                        [91.32, 98.22, 98.22, 98.69, 98.64, 97.94, 98.02, 98.43, 98.22, 98.51, 98.35, 98.27, 98.15, 98.66, 98.82, 98.55, 98.74, 96.53, 98.05, 98.53, 97.54], 
                        [91.33, 98.31, 98.42, 98.19, 98.69, 98.28, 98.11, 98.38, 98.43, 98.40, 98.47, 98.08, 98.17, 97.88, 98.64, 97.44, 98.70, 98.19, 98.49, 97.88, 98.64], 
                        [91.69, 98.42, 97.74, 98.59, 98.34, 98.37, 98.31, 98.38, 98.28, 98.58, 98.38, 98.09, 97.91, 98.26, 98.54, 98.15, 98.58, 98.57, 98.67, 98.89, 98.67], 
                        [91.52, 97.93, 98.05, 98.30, 98.07, 98.17, 98.58, 98.73, 98.23, 98.22, 98.27, 97.03, 98.39, 98.28, 98.77, 98.59, 98.08, 97.85, 98.76, 98.11, 98.99]
                        ])
elif args.dataset == "cifar100":
    if args.metric == "fpr95":
        data = np.array([[70.34, 46.67, 44.49, 37.78, 32.40, 35.71, 32.67, 29.87, 30.25, 29.14, 27.36, 31.41, 32.79, 37.48, 26.20, 29.55, 22.96, 22.25, 23.78, 25.46, 22.55], 
                        [70.34, 46.76, 44.04, 38.26, 33.44, 35.60, 31.55, 28.72, 30.28, 25.69, 26.55, 32.42, 30.94, 35.97, 25.52, 31.48, 22.65, 21.89, 23.63, 22.58, 20.81], 
                        [70.34, 47.47, 43.84, 38.97, 33.74, 34.90, 32.99, 31.11, 28.81, 26.30, 28.25, 34.01, 36.01, 38.60, 26.76, 33.08, 22.67, 26.27, 25.61, 25.27, 24.76], 
                        [70.34, 45.86, 43.82, 38.41, 33.71, 36.00, 32.15, 30.98, 29.95, 24.24, 24.93, 34.26, 32.56, 34.03, 25.74, 30.37, 24.32, 25.13, 23.55, 23.00, 21.49], 
                        [70.34, 45.93, 43.96, 38.84, 33.39, 34.86, 31.25, 31.99, 30.84, 27.81, 25.97, 32.68, 34.28, 36.61, 27.11, 31.09, 26.12, 24.35, 23.80, 25.15, 22.91]
                        ])
        data2 = np.array([[70.34, 46.22, 44.22, 38.21, 32.06, 34.93, 36.69, 36.66, 39.38, 33.79, 38.22, 36.95, 33.62, 40.85, 37.49, 33.86, 34.31, 36.91, 35.32, 35.32, 36.26], 
                        [70.22, 46.77, 43.26, 41.56, 51.89, 33.03, 40.42, 40.45, 44.52, 34.01, 40.02, 36.18, 36.07, 35.49, 38.78, 35.05, 34.27, 34.94, 34.67, 36.31, 36.57], 
                        [69.73, 43.64, 42.49, 38.49, 43.19, 36.56, 34.78, 38.08, 41.94, 36.51, 34.40, 39.20, 35.50, 34.34, 36.93, 35.56, 37.58, 36.86, 36.33, 36.82, 37.72], 
                        [69.73, 42.80, 43.95, 37.48, 43.37, 39.85, 42.78, 37.84, 39.58, 40.14, 38.32, 40.13, 33.56, 36.12, 38.01, 38.07, 36.48, 35.95, 36.54, 35.07, 34.74], 
                        [69.40, 41.37, 35.18, 36.46, 43.32, 40.33, 38.46, 34.21, 36.87, 37.48, 35.84, 40.63, 35.81, 36.53, 34.14, 35.47, 36.38, 36.35, 35.83, 36.43, 35.33]
                        ])
        data3 = np.array([[70.34, 45.77, 44.27, 38.46, 33.51, 36.04, 27.89, 32.05, 30.50, 29.72, 27.27, 30.10, 32.76, 36.97, 29.05, 30.02, 34.58, 29.20, 31.53, 31.34, 39.18], 
                        [70.22, 47.08, 42.88, 41.11, 51.88, 33.29, 28.61, 32.64, 26.60, 27.10, 29.92, 28.53, 27.47, 29.56, 30.44, 34.52, 24.71, 31.61, 24.83, 29.78, 29.53], 
                        [69.73, 43.25, 43.78, 39.14, 43.30, 37.32, 31.18, 25.34, 40.13, 32.74, 28.23, 31.49, 30.55, 31.96, 29.89, 31.04, 31.80, 27.29, 31.46, 24.39, 25.97], 
                        [69.73, 42.68, 44.98, 38.04, 42.81, 39.17, 31.66, 36.53, 30.07, 30.36, 31.60, 36.49, 34.51, 26.60, 29.98, 30.36, 28.75, 24.67, 30.98, 32.56, 30.63], 
                        [69.40, 41.11, 36.23, 37.87, 42.36, 39.88, 37.65, 38.35, 28.67, 38.67, 33.23, 31.60, 37.56, 27.60, 33.69, 38.50, 30.00, 27.94, 33.92, 31.45, 31.23]
                        ])
    elif args.metric == "auroc":
        data = np.array([[80.05, 88.47, 90.74, 91.88, 93.65, 93.10, 92.88, 93.28, 93.39, 92.63, 93.24, 92.48, 92.05, 90.76, 93.62, 92.88, 94.40, 94.53, 94.13, 93.38, 94.13], 
                        [80.05, 88.44, 90.78, 91.92, 93.44, 93.23, 93.02, 93.52, 93.41, 93.35, 93.40, 92.29, 92.46, 91.15, 93.71, 92.50, 94.58, 94.52, 94.17, 94.26, 94.80], 
                        [80.05, 88.35, 90.78, 91.73, 93.49, 93.26, 93.11, 93.24, 93.70, 93.19, 93.21, 91.87, 91.35, 90.68, 93.59, 92.05, 94.60, 93.59, 93.81, 93.59, 93.77], 
                        [80.05, 88.48, 90.80, 91.73, 93.53, 93.13, 93.16, 93.20, 93.48, 93.59, 93.87, 91.89, 92.05, 91.68, 93.65, 92.64, 94.14, 93.93, 94.26, 94.62, 94.90], 
                        [80.05, 88.61, 90.87, 91.67, 93.55, 93.20, 93.13, 92.86, 93.39, 92.89, 93.38, 92.24, 91.59, 90.99, 93.41, 92.59, 93.60, 93.95, 94.25, 94.19, 93.58]
                        ])
        data2 = np.array([[80.05, 88.49, 90.72, 91.84, 93.78, 93.21, 92.71, 92.80, 92.28, 92.83, 92.05, 92.47, 93.10, 91.95, 92.69, 93.09, 92.77, 92.50, 92.78, 92.91, 92.57], 
                        [80.42, 88.03, 90.12, 91.46, 89.33, 93.44, 92.04, 92.11, 91.55, 92.98, 91.78, 92.73, 92.58, 92.74, 91.95, 92.88, 92.75, 92.81, 92.67, 92.39, 92.46], 
                        [80.32, 88.22, 91.14, 92.25, 90.77, 92.42, 92.40, 92.41, 91.16, 92.22, 92.67, 92.02, 92.60, 93.01, 92.23, 92.70, 92.10, 92.37, 92.47, 92.20, 92.17], 
                        [80.62, 89.98, 90.64, 92.43, 91.10, 92.12, 91.86, 92.72, 92.26, 92.19, 92.50, 92.26, 93.39, 92.79, 92.27, 92.65, 92.68, 92.73, 92.63, 93.03, 92.92], 
                        [80.16, 90.36, 92.06, 92.64, 91.87, 91.34, 92.47, 93.10, 92.64, 92.47, 92.62, 92.00, 92.70, 92.62, 92.93, 92.90, 92.52, 92.77, 92.70, 92.57, 92.82]
                        ])
        data3 = np.array([[80.05, 88.64, 90.78, 91.83, 93.54, 93.04, 93.67, 92.80, 93.57, 92.52, 93.28, 92.72, 91.94, 91.04, 92.88, 92.56, 91.58, 92.75, 92.12, 92.04, 89.89], 
                        [80.42, 88.05, 90.03, 91.55, 89.31, 93.53, 93.68, 93.20, 93.72, 93.39, 93.12, 92.86, 93.45, 92.64, 92.49, 91.42, 93.56, 92.44, 93.64, 92.62, 92.74], 
                        [80.32, 88.29, 90.86, 92.11, 90.70, 92.48, 92.71, 93.91, 89.59, 92.44, 93.20, 93.07, 92.34, 92.01, 92.91, 92.22, 92.78, 92.37, 92.16, 93.99, 93.71], 
                        [80.62, 89.94, 90.40, 92.33, 91.34, 92.14, 93.20, 90.87, 92.95, 92.77, 92.91, 91.32, 91.79, 93.34, 92.57, 92.05, 92.99, 93.15, 92.58, 92.26, 93.20], 
                        [80.16, 90.36, 92.03, 92.43, 92.01, 91.81, 91.10, 92.41, 93.15, 90.48, 92.23, 92.82, 91.34, 93.21, 92.13, 90.56, 92.76, 92.83, 91.89, 92.54, 92.52]
                        ])

# Create DataFrame
df = pd.DataFrame(data.T, columns=["Trial 1", "Trial 2", "Trial 3", "Trial 4", "Trial 5"])
df['Epochs'] = time

df2 = pd.DataFrame(data2.T, columns=["Trial 1", "Trial 2", "Trial 3", "Trial 4", "Trial 5"])
df2['Epochs'] = time

df3 = pd.DataFrame(data3.T, columns=["Trial 1", "Trial 2", "Trial 3", "Trial 4", "Trial 5"])
df3['Epochs'] = time

if args.metric == "fpr95":
    # # Melt the DataFrame for use with seaborn
    df_melted = df.melt(id_vars='Epochs', var_name='Trial', value_name='FPR95')
    df_melted2 = df2.melt(id_vars='Epochs', var_name='Trial', value_name='FPR95')
    df_melted3 = df3.melt(id_vars='Epochs', var_name='Trial', value_name='FPR95')
    # # Plotting
    plt.figure(figsize=(12, 8))
    sns.lineplot(x='Epochs', y='FPR95', data=df_melted, estimator='mean', ci='sd', err_style='band', marker="o")
    sns.lineplot(x='Epochs', y='FPR95', data=df_melted2, estimator='mean', ci='sd', err_style='band', marker="s")
    sns.lineplot(x='Epochs', y='FPR95', data=df_melted3, estimator='mean', ci='sd', err_style='band', marker="d")
elif args.metric == "auroc":
    # # Melt the DataFrame for use with seaborn
    df_melted = df.melt(id_vars='Epochs', var_name='Trial', value_name='AUROC')
    df_melted2 = df2.melt(id_vars='Epochs', var_name='Trial', value_name='AUROC')
    df_melted3 = df3.melt(id_vars='Epochs', var_name='Trial', value_name='AUROC')
    # # Plotting
    plt.figure(figsize=(12, 8))
    sns.lineplot(x='Epochs', y='AUROC', data=df_melted, estimator='mean', ci='sd', err_style='band', marker="o")
    sns.lineplot(x='Epochs', y='AUROC', data=df_melted2, estimator='mean', ci='sd', err_style='band', marker="s")
    sns.lineplot(x='Epochs', y='AUROC', data=df_melted3, estimator='mean', ci='sd', err_style='band', marker="d")

plt.xlabel('Epochs', fontweight='bold', fontsize=26)
if args.metric == "fpr95":
    plt.ylabel('FPR95', fontweight='bold', fontsize=26)
elif args.metric == "auroc":
    plt.ylabel('AUROC', fontweight='bold', fontsize=26)

plt.xticks([0, 2, 4, 6 ,8, 10, 12, 14, 16, 18, 20], fontweight='bold', fontsize=26)
plt.yticks(fontweight='bold',fontsize=26)
if args.dataset == "cifar10":
    if args.metric == "fpr95":
        plt.ylim([0, 40])
    elif args.metric == "auroc":
        plt.ylim([90, 100])
elif args.dataset == "cifar100":
    if args.metric == "fpr95":
        plt.ylim([20, 70])
    elif args.metric == "auroc":
        plt.ylim([80, 95])
plt.rcParams.update({'font.size': 26, 'font.weight': 'bold'})
plt.legend(labels=["WDOE", "OE", "DOE"])

if args.dataset == "cifar10":
    if args.metric == "fpr95":
        # plt.savefig("./cifar10_fpr95.png") # 0-40
        plt.savefig("./cifar10_fpr95.svg")
    elif args.metric == "auroc":
        # plt.savefig("./cifar10_auroc.png") # 90-100
        plt.savefig("./cifar10_auroc.svg")
elif args.dataset == "cifar100":
    if args.metric == "fpr95":
        # plt.savefig("./cifar100_fpr95.png") # 20-70
        plt.savefig("./cifar100_fpr95.svg")
    elif args.metric == "auroc":
        # plt.savefig("./cifar100_auroc.png") # 80-95
        plt.savefig("./cifar100_auroc.svg")
